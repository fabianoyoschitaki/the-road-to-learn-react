----------------------------------------------------
Requirements
----------------------------------------------------
node --version > *v7.4.0

npm --version > *v4.0.5

Installing React package locally:
	npm install --save react
		The --save flag tells npm to store the package requirement in a file called package.json. The file can be found in your project folder.
		
npm install --save-dev <package>
	The --save-dev flag indicates that the node package is only used in the development environment.
	It will not be used in production when you deploy your application on a server. What kind of node package could that be? Imagine you want to test your application with the help of a node package.
You need to install that package via npm, but want to exclude it from your production environment.

create a folder with the project name and navigate into it
execute npm init -y (to create the package.json)
install a local package like React with npm install --save react

----------------------------------------------------
Zero-Configuration Setup
----------------------------------------------------
In the Road to learn React you will use create-react-app³² to bootstrap your application. It’s an
opinionated yet zero-configuration starter kit for React introduced by Facebook in 2016. People
would recommend it to beginners by 96%³³. In create-react-app the tooling and configuration evolve
in the background while the focus is on the application implementation.
To get started, you will have to install the package to your global node packages. After that you
always have it available on the command line to bootstrap new React applications.

npm install -g create-react-app

create-react-app <APP NAME>

* if gets error "Missing dependencies in package.json", 
	use create-react-app <APP NAME> --use-npm
	or yarn config set strict-ssl false and then try again npm install -g create-react-app

----------------------------------------------------
NPM application commands	
----------------------------------------------------

// Runs the application in http://localhost:3000
npm start

// Runs the tests
npm test

// Builds the application for production
npm run build

----------------------------------------------------
React Components Lifecycle
----------------------------------------------------
	mounting process:
		constructor()
		componentWillMount()
		render()
		componentDidMount()

	update process:
		componentWillReceiveProps()
		shouldComponentUpdate()
		componenteWillUpdate()
		render()
		componentDidUpdate()

	unmounting process:
		componentWillUnmount()
		
• constructor(props) - It is called when the component gets initialized. You can set an initial
component state and bind useful class methods during that lifecycle method.
	
• componentWillMount() - It is called before the render() lifecycle method. That’s why it
could be used to set internal component state, because it will not trigger a second rendering
of the component. Generally it is recommend to use the constructor() to set the initial state.

• render() - The lifecycle method is mandatory and returns the elements as an output of the
component. The method should be pure and therefore shouldn’t modify the component state.
It gets an input as props and state and returns an element.

• componentDidMount() - It is called only once when the component mounted. That’s the
perfect time to do an asynchronous request to fetch data from an API. The fetched data would
get stored in the internal component state to display it in the render() lifecycle method.

• componentWillReceiveProps(nextProps) - The lifecycle method is called during an update
lifecycle. As input you get the next props. You can diff the next props with the previous props
(this.props) to apply a different behavior based on the diff. Additionally you can set state
based on the next props.

• shouldComponentUpdate(nextProps, nextState) - It is always called when the component
updates due to state or props changes. You will use it in mature React applications for
performance optimizations. Depending on a boolean that you return from this lifecycle
method, the component and all its children will render or will not render on an update
lifecycle. You can prevent the render lifecycle method of a component.

• componentWillUpdate(nextProps, nextState) - The lifecycle method is immediately invoked
before the render() method. You already have the next props and next state at your
disposal. You can use the method as last opportunity to perform preparations before the render
method gets executed. Note that you cannot trigger setState() anymore. If you want to
compute state based on the next props, you have to use componentWillReceiveProps().

• componentDidUpdate(prevProps, prevState) - The lifecycle method is immediately invoked
after the render() method. You can use it as opportunity to perform DOM operations or to
perform further asynchronous requests.

• componentWillUnmount() - It is called before you destroy your component. You can use the
lifecycle method to perform any clean up tasks.

----------------------------------------------------
PropTypes:
----------------------------------------------------
npm install --save prop-types

* PropTypes.array
* PropTypes.bool
* PropTypes.func
* PropTypes.number
* PropTypes.object
* PropTypes.string

* PropTypes.node
* PropTypes.element

----------------------------------------------------
Snapshot Tests with Jest
----------------------------------------------------
npm run test

Now Jest enables you to write Snapshot tests. These tests make a snapshot of your rendered
component and run this snapshot against future snapshots.

npm install --save-dev react-test-renderer

----------------------------------------------------
Unit Tests with Enzyme
----------------------------------------------------

Command Line
npm install --save-dev enzyme react-addons-test-utils


----------------------------------------------------
Font Awesome in React
----------------------------------------------------
If you are new to React JS and using create-react-app cli command to create the application, 
then run the following NPM command to include the latest version of font-awesome.

	npm install --save font-awesome

import font-awesome to your index.js file. Just add below line to your index.js file

	import '../node_modules/font-awesome/css/font-awesome.min.css'; 
or
	import 'font-awesome/css/font-awesome.min.css';
Don't forget to use className as attribute

 render: function() {
    return <div><i className="fa fa-spinner fa-spin">no spinner but why</i></div>;
}

----------------------------------------------------
Advanced Sorting
----------------------------------------------------
It would be possible to write your own sort function, but personally I prefer to use a utility library for
such cases. Lodash¹ is one of these utility libraries. Let’s install and use it for the sort functionality.

Command Line
npm install --save lodash

Now you can import the sort functionality of lodash in your src/App.js file.

src/App.js
import React, { Component } from 'react';
import { sortBy } from 'lodash';
import './App.css';

----------------------------------------------------
State Management in React and beyond
----------------------------------------------------
• read more about lifting state in React¹ https://facebook.github.io/react/docs/lifting-state-up.html








